package com.example.gacha_fit.base_datos;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import androidx.fragment.app.Fragment;

import com.example.gacha_fit.activity.MainActivity;
import com.example.gacha_fit.fragmentos.PantallaLogin;
import com.google.firebase.auth.FirebaseAuth;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;

public class FireBase {
    private FirebaseFirestore db;
    /**
     * Constructor. Inicializa la instancia de Firestore.
     */
    public FireBase() {
        db = FirebaseFirestore.getInstance();
    }
    /**
     * Comprueba si el nombre de usuario ya existe y, si no, registra al nuevo usuario en Firebase.
     *
     * @param email     Correo electrónico.
     * @param password  Contraseña.
     * @param usuario   Nombre de usuario.
     * @param fragment  Fragmento desde donde se realiza el registro.
     */
    public void comprobarNombreUsuarioYRegistrar(String email, String password, String usuario, Fragment fragment) {
        db.collection("Usuarios")
                .whereEqualTo("Usuario", usuario)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    if (!queryDocumentSnapshots.isEmpty()) {
                        //Mensaje para avisar de que ya existe el usuario
                        Toast.makeText(fragment.getActivity(), "Nombre de usuario no disponible", Toast.LENGTH_SHORT).show();
                    } else {
                        //Registrar en Firebase Auth
                        FirebaseAuth.getInstance().createUserWithEmailAndPassword(email, password)
                                .addOnCompleteListener(task -> {
                                    if (task.isSuccessful()) {
                                        Toast.makeText(fragment.getActivity(), "Registro exitoso!", Toast.LENGTH_SHORT).show();
                                        String passwordHasheado = hashSHA256(password);
                                        //Guardar datos en Firestore
                                        Map<String, Object> usuarioData = new HashMap<>();
                                        usuarioData.put("Correo", email);
                                        usuarioData.put("Usuario", usuario);
                                        usuarioData.put("Contraseña", passwordHasheado);
                                        usuarioData.put("Puntuacion", 0);

                                        db.collection("Usuarios")
                                                .document(email)
                                                .set(usuarioData)
                                                .addOnSuccessListener(aVoid -> {
                                                    Log.d("Firebase", "Usuario registrado correctamente");
                                                    crearProgresoInicialFitDex(usuario);
                                                })
                                                .addOnFailureListener(e -> {
                                                    Log.w("Firebase", "Error al registrar usuario", e);
                                                });

                                        //Navegar a pantalla de login
                                        PantallaLogin pantallaLogin = new PantallaLogin();
                                        Bundle args = new Bundle();
                                        args.putString("email", email);
                                        args.putString("password", password);
                                        pantallaLogin.setArguments(args);
                                        ((MainActivity) fragment.requireActivity()).cambiarFragmento(pantallaLogin);
                                    } else {
                                        Toast.makeText(fragment.getActivity(), "Error: " + task.getException().getMessage(), Toast.LENGTH_SHORT).show();
                                    }
                                });
                    }
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(fragment.getActivity(), "Error al comprobar nombre de usuario", Toast.LENGTH_SHORT).show();
                    Log.w("Firebase", "Error al consultar Firestore", e);
                });
    }
    /**
     * Codifica la contraseña del usuario en base hash SHA-256.
     *
     * @param input Texto a hashear.
     * @return Hash en formato hexadecimal.
     */
    private String hashSHA256(String input) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(input.getBytes());
            StringBuilder hexString = new StringBuilder();

            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Sube la lista de ejercicios a la base de datos Firestore.
     */
    public void subirEjercicios() {
        Map<String, Object>[] ejercicios = DatosEjercicios.obtenerEjercicios();

        for (Map<String, Object> ejercicio : ejercicios) {
            String nombre = (String) ejercicio.get("nombre");
            db.collection("Ejercicios")
                    .document(nombre)
                    .set(ejercicio)
                    .addOnSuccessListener(aVoid -> {
                        Log.d("Firebase", "Ejercicio '" + nombre + "' subido correctamente.");
                    })
                    .addOnFailureListener(e -> {
                        Log.e("Firebase", "Error al subir ejercicio '" + nombre + "':", e);
                    });
        }
    }
    /**
     * Crea el progreso inicial del usuario para FitDex y RegistroActividad vacío.
     *
     * @param nombreUsuario Nombre de usuario.
     */
    public void crearProgresoInicialFitDex(String nombreUsuario) {
        Map<String, Object> progresoInicial = new HashMap<>();

        //Obtener todos los ejercicios desde DatosEjercicios
        for (Map<String, Object> ejercicio : DatosEjercicios.obtenerEjercicios()) {
            String nombreEjercicio = (String) ejercicio.get("nombre");
            progresoInicial.put(nombreEjercicio, 0); // 0 = no realizado
        }

        //Subir a Firestore en la colección FitDex
        db.collection("FitDex")
                .document(nombreUsuario)
                .set(progresoInicial)
                .addOnSuccessListener(aVoid -> Log.d("Firebase", "Progreso inicial creado para " + nombreUsuario))
                .addOnFailureListener(e -> Log.w("Firebase", "Error al crear progreso inicial para " + nombreUsuario, e));

        db.collection("RegistroActividad")
                .document(nombreUsuario)
                .set(new HashMap<>());
    }
    /**
     * Registra el ejercicio realizado por un usuario.
     *
     * @param nombreUsuario Nombre de usuario.
     * @param ejercicio     Nombre del ejercicio realizado.
     * @param fecha         Fecha de realización.
     */
    public void registroActividad(String nombreUsuario,String ejercicio,String fecha){
        Map<String,Object> registro = new HashMap();
        registro.put(ejercicio,fecha);
        db.collection("RegistroActividad")
                .document(nombreUsuario)
                .update(registro)
                .addOnSuccessListener(aVoid -> Log.d("Firebase", "Registro de actividad realizado por " + nombreUsuario))
                .addOnFailureListener(e -> Log.w("Firebase", "Error al crear registro de actividad para " + nombreUsuario, e));
    }

    /**
     * Actualiza los puntos de un usuario sumando una nueva puntuación.
     *
     * @param correo     Correo del usuario.
     * @param puntuacion Puntos a agregar.
     */
    public void actualizarPuntos(String correo, int puntuacion) {
        db.collection("Usuarios")
                .document(correo)
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    Long puntosActuales = documentSnapshot.getLong("Puntuacion");
                    if (puntosActuales == null) puntosActuales = 0L;
                    long nuevosPuntos = puntosActuales + puntuacion;
                    Map<String, Object> data = new HashMap<>();
                    data.put("Puntuacion", nuevosPuntos);
                    db.collection("Usuarios")
                            .document(correo)
                            .set(data, SetOptions.merge())
                            .addOnSuccessListener(aVoid -> Log.d("Firebase", "Puntuación actualizada a: " + nuevosPuntos))
                            .addOnFailureListener(e -> Log.w("Firebase", "Error al sumar los puntos: " + puntuacion, e));
                })
                .addOnFailureListener(e -> Log.w("Firebase", "Error al obtener los puntos actuales", e));
    }
    /**
     * Registra el progreso de un ejercicio en FitDex basado en la dificultad.
     *
     * @param dificultad Nivel de dificultad ("Facil", "Normal", "Dificil").
     * @param usuario    Usuario actual.
     * @param ejercicio  Ejercicio realizado.
     */
    public void registrarFitDex(String dificultad,String usuario,String ejercicio) {
        final int cantidad = getCantidadPorDificultad(dificultad);

        comprobarFitDex(usuario, ejercicio, cantidad, new FitDexCallback() {
            @Override
            public void onCheckComplete(boolean debeActualizar) {
                if (debeActualizar) {
                    Map<String, Object> data = new HashMap<>();
                    data.put(ejercicio, cantidad);
                    db.collection("FitDex")
                            .document(usuario)
                            .set(data, SetOptions.merge());
                }
            }
        });
    }

    /**
     * Determina la cantidad de puntos según la dificultad.
     *
     * @param dificultad Nivel de dificultad.
     * @return Valor numérico correspondiente.
     */
    private int getCantidadPorDificultad(String dificultad) {
        switch (dificultad) {
            case "Facil":
                return 1;
            case "Normal":
                return 2;
            case "Dificil":
                return 3;
            default:
                return 0;
        }
    }

    /**
     * Callback para indicar si se debe actualizar FitDex.
     */
    public interface FitDexCallback {
        void onCheckComplete(boolean debeActualizar);
    }

    /**
     * Comprueba el valor actual de un ejercicio en FitDex y evalúa si se debe actualizar.
     *
     * @param usuario       Nombre del usuario.
     * @param ejercicio     Ejercicio a comprobar.
     * @param nuevaCantidad Nueva cantidad a registrar.
     * @param callback      Callback con el resultado.
     */
    public void comprobarFitDex(String usuario, String ejercicio, int nuevaCantidad, FitDexCallback callback) {
        db.collection("FitDex")
                .document(usuario)
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    Long valorActual = documentSnapshot.contains(ejercicio) ? documentSnapshot.getLong(ejercicio) : null;
                    if (valorActual == null || nuevaCantidad > valorActual) {
                        callback.onCheckComplete(true);  // Debe actualizar
                    } else {
                        callback.onCheckComplete(false); // No actualizar
                    }
                })
                .addOnFailureListener(e -> {
                    // Si hay error, puedes decidir si actualizar o no
                    callback.onCheckComplete(true);
                });
    }
}
